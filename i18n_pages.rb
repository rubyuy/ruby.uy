require 'optparse'
require 'yaml'

# Constants
LANGUAGES = ['en']
SELECT_FILES_PATTERN = %r{(?:.md)|(?:.html)}
REJECT_FILES_PATTERN = %r{(?:^_includes/)|(?:^_layouts/)|(?:^_site/)|(?:^README)|(?:^404)|(?:^en/)}

# Add support to --all so to regenerate all translated files
options = {}
OptionParser.new do |opts|
  opts.on("-A", "--all", "Regenerate all files") do |v|
    options[:all] = v
  end
end.parse!

files = if options[:all]
          Dir.glob("**/*.{md,html}")
        else
          `git diff --cached --name-only`.split("\n")
        end

# Select translatable files
pages = files.select { |file| file.match?(SELECT_FILES_PATTERN) }.reject { |file| file.match?(REJECT_FILES_PATTERN) }

# Load app config
config = YAML.safe_load_file("_config.yml")
collections = config["collections"].reject { |key, _| key.end_with?('_en') }

# i18n pages
pages.each do |page|
  LANGUAGES.each do |language|
    page_dir = File.dirname(page)

    FileUtils.mkdir_p("#{language}/#{page_dir}")
    file = File.open(page)
    content = file.read

    # i18n links
    content.gsub!(%r{href=(.)/}, "href=\\1/#{language}/")

    # i18n collections
    collections.keys.each do |collection|
      content.gsub!(%r{site.#{collection}}, "site.#{collection}_#{language}")
    end

    # Update translated file
    File.write("#{language}/#{page}", content)
  end
end

# Configure translated collections
collections.each do |key, value|
  LANGUAGES.each do |language|
    next unless value["permalink"]

    # i18n collection and permalink
    config["collections"]["#{key}_#{language}"] = value.merge("permalink" => "/#{language}#{value["permalink"]}")

    # i18n create symlink from the dir Jekyll expects to the autogenerated folder
    File.symlink("#{language}/_#{key}", "_#{key}_#{language}") unless File.exist?("_#{key}_#{language}")
  end
end

# Update config
File.write('_config.yml', config.to_yaml)
